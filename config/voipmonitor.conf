#
# voipmonitor.org configuration file
#
# location of this file is at ~/.voipmonitor.conf or /etc/voipmonitor.conf
# command line parameters overrides configuration directives in this file
# allowed comments are ; or #.
#
# voipmonitor automatically reads all configuration files in /etc/voipmonitor/conf.d/* which must NOT have [general] section in it
#

[general]

# Configure the sniffer to use the UTC timezone (all CDR records and pcap timestamps will be in UTC time).
# By default, UTC is disabled, and the time is sourced from the local timezone (do not override the "timezone = ..." setting in the following section).
# Enable this option if you have multiple sniffers operating in different timezones.
#utc = 1

# Override the timezone (specify the path to the zoneinfo file). Use this option if you want the CDR and pcap 
# files to be timestamped in a timezone different from that of the server's system setting.
#timezone = /usr/share/zoneinfo/UTC


# If you're running multiple VoIPmonitor instances on the same or different servers, all configured to save to a 
# single database and the same CDR table, you can distinguish between CDR records using the 'id_sensor' column. 
# If 'id_sensor' is set to a value greater than or equal to 0, that value will be stored in the 'cdr.id_sensor' column.
# The value is a 16-bit number, ranging between 1 and 65535.

#id_sensor = 1

# separate spooldir by sensor id (/var/spool/voipmonitor/id_sensor/date/...) - do not enable this unless you really need it.
#spooldir_by_sensor = no

# enable this only if you have multiple voipmonitor receivers on one server
#use_id_sensor_for_receiver_in_files = no


# Enabling 'watchdog' will execute a shell script that automatically restarts the VoIPmonitor process if it is not running. 
# The script is located at /tmp/voipmonitor_watchdog.
# Sending a standard 'kill' signal to the VoIPmonitor process will also terminate the watchdog process.
# Sending a 'kill -9' signal to VoIPmonitor won't terminate the voipmonitor_watchdog. As a result, the voipmonitor_watchdog 
# script will restart the VoIPmonitor process within 5 seconds.
#watchdog = yes
# By default the sensor is restared just with pure binary's start with copy of the command line params
# E.g. cd '/'; voipmonitor --config-file /etc/voipmonitor.conf --pid-file /var/run/voipmonitorinitscript.pid -v 1
# But if you want to replace this with your own command then use the option below. Default is empty.
#watchdog_run_command = systemctl restart voipmonitor

######################## DATABASE CONFIGURATION ##############################################

# create primary indexes for all tables - this is required for MySQL innodb cluster. If you do not 
# use mariadb/mysql wsrep cluster do not enable this option because it will cause more CPU usage. 
# default is no
#cdr_force_primary_index_in_all_tables = no

# All queries are initially stored in internal memory. If the MySQL server becomes unreachable or goes down, the internal 
# queue will start to fill up. Once all RAM is consumed, all CDR records will be lost if the sniffer is restarted.
# Enabling 'query_cache' saves all queries to disk first, preventing the system from consuming all available memory and 
# ensuring that queries survive system restarts. Upon restart, the sniffer will resume sending any unfinished queries.
# default is yes 
#query_cache = yes

# If 'query_cache' is disabled on the server and the server/client feature is enabled (i.e., remote sniffers send CDRs 
# to a central sniffer), it is advisable to enable 'server_sql_queue_limit' on the server side. This helps to prevent 
# the central server from running out of memory. If the number of queries reaches this limit, clients will start 
# buffering queries on their end.
# Tip: For optimal performance, enable 'query_cache = yes' on both the server and clients.
# default setting is 1000000, to disable limit set limit to 0 
#server_sql_queue_limit = 1000000

# When the server/client feature is enabled and the sniffer is receiving CDRs from remote sniffers, the protocol confirms 
# receipt every 1,000 queries by default. If there is a significant round-trip delay between the client and server, 
# the overall throughput will be constrained by the formula 1000 * RTT. To mitigate this, consider increasing the value.
# The default setting is 1000.
#server_sql_concat_limit = 5000

# experimental and undocumented feature yet 
#mysql_redirect_cdr_queue = no
# sql query limitation for redirecting server 
# by default it is server_sql_queue_limit/5 
#server_sql_redirect_queue_limit = 

# mysql server can be IP or hostname. mysqlsocket is faster then mysqlhost (localhost is converted to sock though) 
mysqlhost = localhost
#mysqlhost = 127.0.0.1
#mysqlsocket = /var/run/mysqld/mysqld.sock
mysqlport = 3306
mysqlusername = root
mysqlpassword =

# mysql database - will be created automatically if it does not exist
mysqldb = voipmonitor

# SSL/TLS setting for the mysql connection. You can use key + cert + cacert. Or you can use the cacert only (in the Azure environment). Etc.
# file with key
#mysqlsslkey = /etc/ssl/client-key.pem
# file with certificate
#mysqlsslcert = /etc/ssl/client-cert.pem
# file with ca certificate
#mysqlsslcacert = /etc/ssl/ca-cert.pem
# directory with certs
#mysqlsslcapath = /etc/ssl/capath
# list of allowed ciphers
#mysqlsslciphers =

#mysql_reconnect = yes

# Speed up CDR storage and active call listings. By default, all timeouts take approximately 10 seconds. To reduce this to a 3-second delay, 
# set the value to 'yes'; for a 1-second delay, set it to 'quick'.
# The default setting is 'NO', which is the recommended option unless real-time CDR generation is absolutely necessary.
#quick_save_cdr = NO/yes/quick
#cleanup_calls_period = 10

# To disable the MySQL tables' integrity check and upgrade process upon service start, set this option to 'yes'.
#disable_dbupgradecheck = yes

# mysql connect timeout default 60 (seconds)
#mysql_connect_timeout = 60

# Enable compression for the connection to the MySQL server. Do not enable this option if your MySQL server resides 
# on the same host. The default setting is 'disabled'.
#mysql_client_compress = no

# Enable partitioning of cdr* tables by day. If your current schema lacks partitioning, you MUST start with a new database. 
# The default setting is 'yes'.
#cdr_partition = yes

# By default, partitions are created on a daily basis. For extremely high CDR insert rates (>= 15,000 per second), 
# daily partitions are inefficient and can put excessive strain on I/O and CPU resources. This option can be toggled 
# between 'yes' and 'no' at any time; the sniffer will then begin creating partitions either by the hour or by the day, 
# depending on the setting. The default setting is 'no'. 
#cdr_partition_by_hours = no

# Disable automatic partition creation that runs every 12 hours. If you have multiple sensors storing data to a single 
# database, it's redundant for each sensor to create partitions. Default is 'no'.
# disable_partition_operations = yes

# If you need to create partitions for the last 90 days, use this option. This is helpful for data migration and will 
# only create partitions if the table does not already exist.
# create_old_partitions = 90

# Alternatively, you can specify a starting date for the oldest partition using the 'create_old_partitions_from' option.
# create_old_partitions_from = YYYY-MM-DD


# Options for enabling table compression:
# The default is InnoDB page compression. The old compression method used "ROW_FORMAT=COMPRESSED," which relies on gzip 
# and is too slow for high call-per-second traffic (>= 5000 CDRs per second), and also depends on CPU base frequency.
# MySQL >= 5.6 (https://dev.mysql.com/doc/refman/8.0/en/innodb-page-compression.html) supports InnoDB page compression, 
# which is superior to ROW_FORMAT. To use the new InnoDB page compression with MySQL, set mysqlcompress_type = compression="lz4."
# MariaDB >= 10.1.22 (https://mariadb.com/kb/en/innodb-page-compression/) also supports InnoDB page compression, which 
# is controlled by innodb_compression_algorithm=lz4 in your MariaDB configuration. Confirm that lz4 is compiled by checking 
# Innodb_have_lz4, and then set mysqlcompress_type=PAGE_COMPRESSED=1.

# Tip: One key difference between ROW_FORMAT=COMPRESSED and InnoDB page compression is that the latter keeps only 
# uncompressed pages in the InnoDB buffer pool, whereas the former keeps both. Another advantage is that you can use 
# the fast lz4 compression if gzip becomes a bottleneck.
# To transition from older compression methods (defined by ROW_FORMAT=COMPRESSED) to the new InnoDB page compression, 
# you can use the following ALTER TABLE commands: 
#
# MySQL:  
# ALTER TABLE cdr ROW_FORMAT=dynamic COMPRESSION="lz4"; 
# MariaDB:
# ALTER TABLE cdr ROW_FORMAT=DYNAMIC `page_compressed`=1;
# 
# Run this command for each cdr* table you wish to keep compressed. Alternatively, you can drop all cdr tables if retaining 
# data is not required; VoIPmonitor will create them automatically for you.
# Note: InnoDB page compression requires the ROW_FORMAT to be "dynamic," and the COMPRESSION keyword defines the compression 
# algorithm (lz4 is currently the fastest).

# You don't need to specify mysqlcompress_type unless you want to use an older compression method or change the default lz4 
# compression algorithm. The valid value for mysqlcompress_type depends on your MySQL server version and whether you are 
# using MySQL or MariaDB; they have different options:

# This is the new InnoDB page compression for MySQL (not compatible with MariaDB) - this is the default and recommended option.
#mysqlcompress_type = compression="lz4"

# This is the new and only page compression option for MariaDB (not compatible with MySQL).
# The compression algorithm for MariaDB is automatically selected in this order: lz4, lzma, zlib.
# If MariaDB is not compiled with lz4 or lzma, zlib will be used, which is not recommended for high call-per-second traffic.
# This is the default option for MariaDB if not specified.
#mysqlcompress_type = PAGE_COMPRESSED=1

# This is the old compression format for MySQL (not recommended now).
#mysqlcompress_type = ROW_FORMAT=COMPRESSED  

# note: you do not need to specify mysqlcompress_type - it will be automatically chosen to the best option based on mysql/mariadb verison


# Load configuration from the database table 'sensor_conf' using the 'id_sensor' value (SELECT * FROM sensor_conf WHERE id_sensor = N).
# If 'id_sensor' is not set and 'mysqlloadconfig' is enabled, the first row in the database with 'id_sensor IS NULL' will be loaded.
# The configuration from this file is loaded FIRST and then OVERWRITTEN by the settings in MySQL.
# If this configuration option is not specified, the default setting is yes
# mysqlloadconfig = yes

# disable storing cdr.callend (cdr.callend = calldate + duration) - disabling this makes sense only of cdr.callend column is missing 
#sqlcallend = yes


# Enable the sniffer to generate cdr.id, allowing for the concatenation of multi-insertions into all CDR tables. This is essential 
# for handling an extremely high number of calls per second (>= 10,000 CPS).
# Once this option is enabled, it's imperative to configure all remote sensors to send CDR data through a single sniffer server using 
# the 'server_destination', 'server_destination_port = 60024', and 'packetbuffer_sender' (set to either 'no' or 'yes') options.
# The default setting is 'no'.
# mysql_enable_set_id = yes

# disable all RTP statistics columns 
#disable_cdr_fields_rtp = no

#save all rtp streams to db regardless on palod or codec validity
#save_all_rtp_streams_to_db = no

# log all sql errors 
#sql_log_all_errors = no

# log sql errors to some specific file
#sql_errors_log_file = /path/to/log

# skip specific sql errors 
#sql_errors_skip = 1054, 1136

#manager command is supported for sql_errors_skip:
#    for set: echo 'sql_errors_skip 1054,1136' | nc 127.0.0.1 5029
#    for reset: echo 'sql_errors_skip' | nc 127.0.0.1 5029


######## SQL Queues Fine Tuning
# The sniffer uses a dynamically generated stored procedure, which concatenates a number of messages to mitigate network latency limitations.
# The default size of this queue is 400.
# Multiple internal SQL queues exist for different types of data such as CDR, message, register, files (for cleaning), HTTP, and IP accounting.
# Specific 'mysqlstore_concat_limit_*' options can override the global 'mysqlstore_concat_limit' setting.
#mysqlstore_concat_limit = 400
#mysqlstore_concat_limit_cdr = 400
#mysqlstore_concat_limit_message = 400
#mysqlstore_concat_limit_register = 400
#mysqlstore_limit_queue_register = 1000000
#mysqlstore_concat_limit_http = 400
#mysqlstore_concat_limit_ipacc = 400

# By default, each queue is managed by a single thread, which may be insufficient for high-traffic scenarios.
# If a queue grows despite having set 'innodb_flush_log_at_trx_commit = 2' in your MySQL configuration,
# consider increasing the number of threads. Additional threads are automatically created when the queue exceeds 1000 entries.
# Be aware that each new thread establishes a new MySQL connection.
# If any queue falls below 1000, the corresponding thread and MySQL connection are released.
# The maximum number of threads is capped at 99, even if a higher value is configured.
#mysqlstore_max_threads_cdr = 2
#mysqlstore_max_threads_message = 2
#mysqlstore_max_threads_register = 2
#mysqlstore_max_threads_http = 2


##### Database Cleaning Settings #########

# Uniformly sets the cleaning parameters for CDR, register_state, register_failed, and sip_msg.
# The system first checks the 'cleandatabase' parameter and then looks at the specific 'cleandatabase_*' parameters.
#cleandatabase = 0

# Removes CDR partitions older than a set number of days. Disabled if set to 0 (default).
# Also includes the 'message' table used for saving SIP MESSAGE data.
#cleandatabase_cdr = 0

# Removes data from the 'rtp_stat' table older than N days. The default setting is 2 days.
#cleandatabase_rtp_stat = 2

# Removes older partitions for 'register_state', 'failed' and time_info. Disabled if set to 0 (default).
#cleandatabase_register_failed = 0
#cleandatabase_register_state = 0
#cleandatabase_register_time_info = 0

# Removes partitions from the 'sip_msg' table older than a set number of days. Disabled if set to 0 (default).
# This table is used for saving OPTIONS/SUBSCRIBE/NOTIFY data.
#cleandatabase_sip_msg = 0

# Cleans the 'cdr_rtp_energylevels' table based on a set number of days.
#cleandatabase_cdr_rtp_energylevels = 0

# Removes partitions from the 'ss7' table older than a set number of days. Disabled if set to 0 (default).
#cleandatabase_ss7 = 0

# Allows partition operations only during a specific time range to avoid performance degradation during peak hours.
# The following example sets the time window between 1am and 5am (24-hour format).
# default is 1-5AM 
#partition_operations_enable_fromto = 1-5

## EXPERT OPTIONS ##

# Executes partition operations in a separate thread. Enable only if you understand the implications.
#partition_operations_in_thread = yes


## database cleaning based on actual data used ##

# cleandatabase_size parameter is in MB. 
#cleandatabase_size = 500000

# if mysqlhost is set to localhost or 127.0.0.1 it will assume that the database is running locally. 
# if mysqlhost is set to some domain name and the database is still local, set this option to yes
#cleandatabase_size_force = true

# if the database is running remotely and you would like to count used space and use cleaning based on
# size, you can remotely mount the directory and set this option pointing to directory of voipmonitor's db
#mysqldatadir=/mnt/dbdata/voipmonitor

############################


# VoIPMonitor Configuration for Sniffing Mode
# VoIPMonitor can either sniff network traffic directly from a network interface or read from files.
# It supports GRE and ERSPAN encapsulation without requiring additional configuration.

# Interface Configuration
# 'interface' specifies the network interface(s) on which to listen.
# Using 'any' will cause VoIPMonitor to listen on all network interfaces. Note: Using "any" won't put interfaces into promiscuous mode.
# If you need to enable promiscuous mode manually, use a command like "ifconfig eth0 promisc".
# For multiple interfaces, provide a list separated by commas. For example: interface = eth0,eth1

# To listen on both eth0 and eth1:
#interface = eth0,eth1

# interface_libpcap_filter #
# Defines custom libpcap filters per network interface, allowing traffic load distribution across multiple virtual 
# interfaces, each handled by separate processing threads in VoIPmonitor. This significantly improves packet 
# processing performance in high-traffic environments by parallelizing the capture and processing workload.
# this is typically needed for AWS EC2 instances which has limits 2.2M packets per second per one libpcap 
# instance (in this case DPDK should be better choice). 
# whenever there is 100% si (software interrupts) in TOP when reading packets from the interface (which can be seen also by 
# simply running tcpdump) you can use interface_libpcap_filter to split the traffic 
# syntax: 
# Multiple lines or semicolon-separated (;) entries are supported:
#interface_libpcap_filter = <interface> : <libpcap_filter_expression>

# When multiple filters are defined for the same physical interface using interface_libpcap_filter, 
# VoIPmonitor internally creates multiple libpcap handler instances. Each handler independently applies its own 
# filter and captures matched packets. However, libpcap itself does not create additional kernel threads per filter. 
# Instead, VoIPmonitor initiates multiple user-space threads, each calling pcap_loop separately, thereby parallelizing 
# packet reading and processing in user space. This approach helps distribute CPU load effectively across available cores, 
# maximizing the packet processing capacity.

#In this example, traffic on interface eth0 is divided into two separate capture streams, each with 
# its own libpcap filter and processing thread.

#interface_libpcap_filter = eth0 : port 5060
#interface_libpcap_filter = eth0 : not port 5060

#or combined:
#interface_libpcap_filter = eth0 : port 5060; eth0 : not port 5060


# Enable this setting to 'yes' if you require Ethernet encapsulation while sniffing on the 'any' interface. 
# This is necessary only if you need to merge PCAP files with differing encapsulations. Default: no
#convert_dlt_sll2en10 = no

# To listen on all interfaces:
#interface = any

# Current setting is to listen on eth0 only:
interface = eth0

# set interface's coalesce and ring options via ethtool (-G rx and -C rx-usecs). Default is yes ethtool must be installed)
#interfaces_optimize = yes

# set number of channels (interrupt queues) to 8 or lower (depends on nuber of cpu cores). 
# when set to 0 it will not reset interrupt queues
#eth_max_channels = 0

# Enable promiscuous mode for the network interface to capture all packets, not just those addressed to the machine.
# Note: This will not work if you have set 'interface = any'.
# default is yes
#promisc = yes

# Packet Capture Length overrides the default snapshot length for captured packets.
# Default is 3200 bytes, and 6000 bytes if SSL/HTTP sniffing is enabled.
# Rare use cases may require a larger snapshot length.
#snaplen = 20000

# Packet Capture Filter
# Specify a PCAP filter to limit the types of packets that are captured.
# Example: 'udp' will capture only UDP packets, but won't capture VLAN packets.
# WARNING - if you need to sniff IPinIP (mirrored packets from voipmonitor) filter = udp will filter all those packets. In this case just disable filter.
# WARNING - this rule "udp or (vlan and udp)" will not capture double VLAN tagged packets
#filter = udp or (vlan and udp)

# IP Filter for Sniffing
# If you want to filter based on IP addresses, especially in a sender sniffer setup, use 'interface_ip_filter'.
# Using 'filter = host ...' can be CPU-intensive and lead to packet loss.
# Multiple 'interface_ip_filter' options can be specified, with either specific IPs or IP ranges.
#interface_ip_filter = 192.168.0.1
#interface_ip_filter = 192.168.0.2
#interface_ip_filter = 192.168.0.3
#interface_ip_filter = 192.168.2.0/24

# Filtering Algorithm for IP Filter
# Determines the algorithm used for IP filtering. 'yes' uses a b-tree, 'no' uses a sorted list.
#interface_ip_filter_quick = yes

#### threading settings #######

# threading_mod = 1 - uses only one thread for packet processing (suitable for low traffic) 
# threading_mod = 2 - uses standalone threads for each interface 
# threading_mod = 3 - deduplication is offloaded to standalone thread 
# threading_mod = 4 - deduplication is offloaded to multiple threads 
# threading_mod = 5 - uses more threads for RTP processing 
# threading_mod = 6 - uses advanced allocation stack for packet flows 

# since 2023.11 - sniffer sets threading_expanded (it was t2_boost) to yes. This overrides all threading_mod which is not relevant if threading_expanded is set
# threading_expanded sets sniffer for maximum throughput using threads which spawns them automatically according to CPU and traffic 
# for very high traffic (>= 1500Mbit) set this option to high_traffic (this option will be default in near future) 
# default yes
# disabling threading_expanded if you have only 1 or 2 CPU cores or the traffic is <100Mbit or running it on some virtualisation where multiple threads costs a lot of CPU cycles due to unoptimised usleep 
#threading_expanded = yes
#threading_expanded = high_traffic

# in case pb:N thread will be bottleneck, enable t2_boost_pb_detach_thread = yes (it is unefficient to enable it in most cases) 
#default is no
#t2_boost_pb_detach_thread = yes 

# for high network throughput (>= 5Gbit) set: 
#pre_process_packets_next_thread = 4 
#pre_process_packets_next_thread_max = 4 # (hard limit is 4 even if value is higher) 


# `preprocess_rtp_threads` specifies the number of threads used for RTP packet preprocessing. The default value of 2 means 
# two threads at the stgart, which are capable of handling 10,000 concurrent calls on a machine with an Intel Xeon CPU E5-2650, 
# while maintaining a 30% reserve. Additional threads are spawned automatically. 
# If you set this option to "no", then no additional threads are allocated for RTP 
# packet processing. Most users will likely not need to modify this value.
#preprocess_rtp_threads = 2

# limit maximum rtp preprocess threads  (default unlimited) 
# additional threads are spawned automatically 
#preprocess_rtp_threads_max = 5

# limit maximum rtp packets hash next thread (default unlimited) 
# additional threads are spawned automatically 
#process_rtp_packets_hash_next_thread_max = 6

# `destroy_calls_in_storing_cdr` moves the process of removing calls from memory to a separate thread.
# You should enable this if you have >= 50,000 concurrent calls and if the t2/c thread CPU usage is above 90%.
# The default value is "no".
# destroy_calls_in_storing_cdr = yes

# `numa_balancing_set` controls the behavior of the NUMA memory balancing feature in the Linux kernel.
# The feature can create overhead issues (due to TLB shootdown) when the sniffer allocates large amounts of memory.
# Possible options are:
# - autodisable (default): Automatically disable NUMA balancing when TLB shootdown exceeds 500 per second.
# - enable: Explicitly enable NUMA balancing at sniffer startup.
# - disable: Explicitly disable NUMA balancing at sniffer startup.
# The default setting is "autodisable".
# numa_balancing_set = autodisable


############################################
# Thread Scheduling and Priority Settings
# Syntax: <scheduler_type> <priority_value>
# The scheduler_type defines the type of scheduling algorithm to be used for thread prioritization.

# The recommended scheduler type is "prio," which utilizes the NICE value for setting thread 
# priorities. The priority range for NICE is -20 to 20, with -20 being the highest priority.
# Warning: Scheduler types "rr" (real-time round-robin) and "fifo" (real-time first-in-first-out) 
# are currently not recommended due to observed instability on high-traffic systems running Linux Kernel 4.XX. 
# (newer kernels not tested yet) 

# By default, the scheduler sets a "prio" priority of -20. This means that if the packet buffer heap grows 
# by more than 1% and thread CPU usage is above 45%, threads will be automatically assigned a NICE value of -20.
#sched_pol_auto = prio -20
#sched_pol_auto_heap_limit = 1
#sched_pol_auto_cpu_limit = 45

# Alternatively, you can manually set priorities for specific thread groups.
# Uncomment the following lines to manually set priorities:
# (and remove or comment sched_pol_auto, sched_pol_auto_heap_limit, sched_pol_auto_cpu_limit) 
#sched_pol_interface = prio -20
#sched_pol_pb = prio -20
#sched_pol_sip = prio -20
#sched_pol_rtp_prep = prio -20
#sched_pol_rtp_read = prio -20

# Real-time round-robin priority settings (not recommended).
# Uncomment the following lines to use real-time round-robin prioritie
# (and remove or comment sched_pol_auto, sched_pol_auto_heap_limit, sched_pol_auto_cpu_limit) 
#sched_pol_interface = rr 90
#sched_pol_pb = rr 89
#sched_pol_sip = rr 88
#sched_pol_rtp_prep = rr 87
#sched_pol_rtp_read = rr 86

########################################

# enable support for ipv6. If enabled the databaes will be created with ipv6 compatible columns
# if you have older database (database was created before ipv6 was enabled) you have to upgrade it with scripts/ipv6_alter.sql
#ipv6 = yes


### SERVER/CLIENT configuration ###########################

# Starting from version 19.6, the sniffer supports a new server/client sensor architecture.
# In this setup, the GUI communicates only with the server's sensor, which in turn handles client sensors.
# This allows client sensors to be behind NAT but still reachable from the GUI.
# Client sensors are dynamically registered by the server's sensor.
# All communication between the server and client sensors is encrypted.
# Currently, only one server sensor is supported. All other sensors must act as clients.
# By default, the client processes data, saves pcap files locally, and sends SQL queries to the server's sensor for execution.
# No SQL settings are required on the client side.

# Server-side settings
# The IP address and port the server will bind to. Both must be accessible from the GUI.
#server_bind =
#server_bind_port = 60024
# Password for server's sensor authentication
#server_password =

# Client-side settings
# The IP address and port of the server sensor the client will connect to.
# multiple IP addresses can be provided for failover needs
#server_destination = 192.168.0.1, 192.168.0.2
#server_destination_port = 60024

# Password for client's sensor authentication
#server_password =

# If set to 'yes', the client sensor sends raw data to the server's sensor for processing.
# The server's sensor will then handle data storage and SQL operations. 
# Default is 'no'.
#packetbuffer_sender = no

# Time synchronization settings
# Maximum allowed time difference for various connections (in seconds)
#mirror_connect_maximum_time_diff_s = 2
#client_server_connect_maximum_time_diff_s = 2
#receive_packetbuffer_maximum_time_diff_s = 30

# Confirmation settings
# Whether to require confirmation for mirrored packets. Disabling may improve throughput.
# default is yes
#mirror_require_confirmation = yes

# Compression settings
# Type of compression to use between client and server. Options are zstd, gzip, lzo or none.
# Default is zstd
#server_type_compress = zstd

## END of SERVER/CLIENT configuration ####################

# The receiver's sensor by default differentiates packets based on the originating sender's sensor.
# However, in certain scenarios like multipath routing, packets from a single call may traverse
# different paths and get captured by different sensors. By disabling this option (setting it to 'no'),
# the receiver's sensor will not differentiate packets based on their originating sensor,
# allowing it to properly compose calls even when they are captured by multiple sensors.
# Default setting is 'yes'.
#receiver_check_id_sensor = yes


## old packet mirroring feature  ###########################

# In this mode, the sender packages data into a compressed stream and sends it over TCP to a remote sniffer.
# If you intend to use this sniffer solely for mirroring, you'll need to configure the interface, packetbuffer_* options,
# enable compression, and set packetbuffer_file_* options. This ensures that no packets are lost if the connection to the remote
# sniffer becomes unstable. The system will attempt to reconnect in case of failure.
# Packets are mirrored along with their original timestamps and headers.
# note: for mirroring packets use the newer client/server described above with enabled  packetbuffer_sender = yes

# Sender Configuration
# To set up mirroring on the sender side, you need to specify the interface, ringbuffer, packetbuffer_*, filter,
# as well as the following mirror_destination_* options.
#mirror_destination_ip          =
#mirror_destination_port        =

# Receiver Configuration
# On the receiver side, set the bind IP and port. Don't forget to adjust your firewall settings so only
# the sender can connect to this receiver.
#mirror_bind_ip               =
#mirror_bind_port             =

# force set sensor id by sender instead of receiver 
#mirror_bind_sensor_id_by_sender = yes

# Confirmation Settings
# To ensure data integrity, each packet should be confirmed by the receiver. However, this might slow down
# high-traffic systems due to the round-trip time needed for confirmations.
# Default is 'yes'.
#mirror_require_confirmation = yes

# Checksum Settings
# Enable block-level checksums to make the mirroring process more robust at the cost of slightly higher CPU usage.
# Default is 'yes'.
#mirror_use_checksum = yes
## end mirroring ###########################


# The default window length for sorting packets from different remote mirroring sniffers is 2000ms (2 seconds).
# This window is useful for handling network latency or buffering issues. Increasing the window length may help
# prevent packet reordering issues in such scenarios.
# This setting is particularly relevant if you're using the `mirror_bind_ip` option.
# The default value is 2000ms.
#pcap_queue_dequeu_window_length = 2000

# sip send ########################
# The sip_send feature allows the system to send SIP packets over either TCP or UDP based on your configuration.
# To use TCP, set the destination and port using sip_send. To use UDP, enable the sip_send_udp option.
# If you want the packet to be sent immediately rather than being buffered, set sip_send_before_packetbuffer to 'yes'.
# Note that this feature is NOT intended for mirroring SIP packets to the voipmonitor sniffer but is designed for
# interacting with third-party applications.

# WARNING: Please note that each SIP packet sent to the sip_send destination is appended with an extra 2 bytes
# indicating the length of the SIP packet. This is important for the receiving application to note.
#
# For testing, you can use netcat (nc) to listen for incoming packets on the destination server.
# To test using TCP: nc -l 192.168.0.2 -p 1555
# To test using UDP: nc -l 192.168.0.2 -p 1555 -u

# IP and port where SIP packets will be sent using TCP
#sip_send = 192.168.0.2:1555
# Use UDP for sending SIP packets (yes/no)
#sip_send_udp = yes
# Send SIP packets immediately without buffering (yes/no)
#sip_send_before_packetbuffer = yes
# end sip send ########################


# scan pcap dir ################
# This feature enables the scanning of pcap files stored in a specific directory. This is useful when running tcpdump
# to create pcap files at regular intervals (e.g., every 5 seconds using the -G 5 option). Tcpdump stores these files
# in a specified directory (e.g., /dev/shm/voipmonitor), which voipmonitor scans and processes.
# If the sniffer can process the pcap files in real-time, you'll find only one or two pcap files in the directory.
# However, if the sniffer can't keep up due to I/O or CPU bottlenecks, the number of pcap files will increase.

# WARNING: Versions of libpcap older than 1.1 have a memory leak issue when a pcap filter is set.

# Example tcpdump command for generating pcap files:
# nice -n -20 tcpdump -B500000 -i eth2 udp -G 5 -w /dev/shm/voipmonitor/voipmonitor 2>/dev/null 1>/dev/null &
# Directory to scan for pcap files
#scanpcapdir = /dev/shm/voipmonitor

# Voipmonitor will, by default, read any new files created in the scanpcapdir directory as soon as they are closed.
# This is the usual setting if you're using tcpdump for packet capturing. However, if you're using different capturing software,
# you might need to change this setting to "rename", especially if the software writes to a temporary file first and renames it later.
# Default setting is "newfile".
#scanpcapmethod = newfile
# end scan pcap dir ###############

# NAT ######################
# If both the SIP(media) server and client are behind NAT, you can specify aliasing for correct packet sniffing.
# Typically, voipmonitor can track both RTP streams based on the remote side's IP address. However, if the
# RTP stream is coming from a different IP than that used for SIP signaling—especially if both are behind NAT—
# it's difficult to track the correct IP.
# note: this is needed in case SIP server is traslated on firewall from public IP to private IP
# Use 'natalias' to specify alias IP addresses for NAT situations. You can use multiple natalias definitions 
#natalias = 1.1.1.1 10.0.0.3
#natalias = 1.1.1.2 10.0.0.3
#natalias = 1.1.1.3 10.0.0.4

# NAT Helper Option:
# If a SIP device (with source IP 1.1.1.1) sends in its SDP that it wants to establish an RTP connection to 10.0.0.1:10000,
# enabling 'sdp_reverse_ipport' will allow voipmonitor to also sniff RTP from 1.1.1.1:10000 or to 1.1.1.1:10000.
# Be cautious while using this option as it may introduce more problems than solutions.
# Default is 'no'.
#sdp_reverse_ipport = no

# To ignore certain RTP streams based on IP or IP:port combination, use 'sdp_ignore_ip_port' or 'sdp_ignore_ip'.
# This can be useful to exclude specific devices or ports from being monitored.
# Examples:
# sdp_ignore_ip_port = 192.168.0.1:100
# sdp_ignore_ip_port = 192.168.0.2:101
#sdp_ignore_ip = 192.168.0.1
#sdp_ignore_ip = 192.168.0.f
#############################


# RTP Tracking and SDP Processing Configuration

# SDP Multiplication
# Controls how many calls can share the same IP:port combination for RTP streams based on SDP data.
# Be cautious: enabling this could lead to high disk usage as RTP packets will be stored for multiple calls.
# Setting to 0 will associate RTP packets only with the newest call.
# Default value is 3.
#sdp_multiplication = 0

# Disable SDP Processing
# Disabling SDP processing is advisable only for very high call rates (> 1000 CPS).
# This will disable RTP tracking based on SDP.
# Default is 'no'.
#disable_process_sdp = yes

# RTP Duplication Elimination
# Default behavior assigns RTP streams based on destination IP:port from SDP, which can lead to multiple RTP streams 
# being associated with a single call. Enabling this option avoids that by also checking the source IP:port.
# Available options:
# 'yes' - enable the feature
# 'no' - disable the feature (default)
# 'keep_rtp_packets' - same as 'yes', but also stores extraneous RTP packets for debugging purposes.
#rtp_check_both_sides_by_sdp = no

# Ignore RTP on Authentication Failure
# If set to 'yes', the RTP ports for a call will be closed if authentication fails.
# Default is 'yes'.
#ignore_rtp_after_auth_failed = yes

# RTP Sequence Probation
# According to RFC 3550, the sniffer only accepts an RTP stream once there are at least two packets with consecutive sequence numbers.
# Setting this to 'yes' will disable this sequence validation.
# default is no
#disable_rtp_seq_probation = no

# in case you need to store RTP CN packets with wrong sequence generation, those are normally discarded due to the SEQ sanity check. 
# in this case disable_rtp_seq_probation has to be set to yes and disable_rtp_seq_check has to be set to yes which disables skipping 
# duplicit SEQ RTP packets.  
# default is no
# disable_rtp_seq_check = yes 

#rtp_count_all_sequencegap_as_loss (NO/yes)

# By default, Voipmonitor follows the RFC guidelines which state that the SSRC in RTP headers must not be zero.
# If your setup requires parsing RTP packets with zero SSRC, you can enable the following option.
# Default behavior is to ignore such packets ('no').
#allow-zerossrc = yes

# If there are scenarios where multiple RTP packets exist on the same IP and port combination but with different SSRC,
# you may want to set this option to 'NO' to avoid conflicts or mishandling.
# By default, the system will check for different SSRC on the same IP and port ('yes').
#check_diff_ssrc_on_same_ip_port = yes

# Store SDP IP/Port in Database
# If enabled, the IP and port from the SDP message will be stored in the 'cdr_sdp' table.
# Default is 'yes'.
#save_sdp_ipport = yes

# RTP Stream Source Validation
# By default, all RTP streams are considered. Enabling this will only use RTP streams that have the same IP as in the SIP/SKINNY header.
# Default is 'no'.
#rtpfromsdp_onlysip = no

# Determine Actual RTP Endpoints
# When SIP proxies or RTP proxies are involved, enabling this ensures that the main caller and callee streams are determined from the actual endpoints, rather than the proxies.
# Default is 'yes'.
#rtpip_find_endpoints = yes

# TCP API interface #########################

# Manager Interface Bind Address
# Specifies the IP address to which the manager interface should bind. 
# Default is localhost (127.0.0.1). 
# Warning: Changing this could expose the manager interface to external networks. 
# If you do change it, make sure to secure the connection via firewall rules and possibly change the default port.
#managerip = 127.0.0.1

# Manager Interface TCP Port
# Specifies the TCP port for the manager interface. Default is 5029.
# If you change the manager IP, consider also changing this to a non-standard port for security reasons.
managerport = 5029

# TCP interface is encrypted by default. Disabling encryption is possible with manager_enable_unencrypted
#manager_enable_unencrypted = yes

# enable manager interface on socket file (communication is unencrypted) 
#managersocket = /tmp/vm_manager_socket

#enabling temporary socket file: 
#$ echo 'manager_file start' | nc 127.0.0.1 5029
#OK (/tmp/VM1554808_1718258068335594502)

#enabling specific temporary socket file: 
#$ echo 'manager_file start /tmp/vm' | nc 127.0.0.1 5029
#OK (/tmp/vm)

# Local Country Code
# Classifies numbers that don't start with '00' or '+' according to this country code, following ISO 3166-1 alpha-2 standards.
# Default is to use the local country code.
# Example: To classify according to US standards, set to 'US'.
#local_country_code = local
#local_country_code = US


# SIP Port and TCP Reassembly Configuration

# SIP Port List
# Specifies the SIP ports that VoIPmonitor will listen to. 
# Multiple ports can be specified by using ranges and multiple entries. 
# This applies to UDP, TCP, and WebSocket (unencrypted). For encrypted SIP, see ssl* options.
sipport = 5060
#sipport = 5060,5061,5062,5070-5080

# Enable or Disable TCP reassembler
# default is yes
#sip_tcp_reassembly_ext = yes

# Max TCP Reassembly Attempts
# Sets the maximum number of attempts for TCP reassembly. Default is 50.
#sip_tcp_reassembly_stream_max_attempts = 50

# TCP Reassembly Timeout
# Timeout for TCP reassembly link extension. Default is 10 seconds.
#sip_tcp_reassembly_ext_link_timeout = 10

# Experimental TCP Reassembly Options
# These are options for TCP reassembly to be used in high traffic conditions.
# Default is 'no'. Other options include 'yes', 'ext', and 'comb_ext'.
#sip_tcp_reassembly_ext_quick_mod = no

# Max SIP Packets in Call
# Limit the maximum number of SIP packets for a single call. Default is 2000.
#max_sip_packets_in_call = 2000

# Max SIP INVITE Packets in Call
# Limit the maximum number of SIP INVITE packets for a single call. Default is 10000.
#max_invite_packets_in_call = 10000

# Store SIP Ports in Database
# Enable storing SIP source and destination ports in the database. Default is 'yes'.
cdr_sipport = yes

# Store RTP Destination Port in Database
# Enable storing RTP destination port in the database. Default is 'yes'.
cdr_rtpport = yes

# Store RTP Source Port in Database
# Enable storing RTP source port in the database. Default is 'no'.
#cdr_rtpsrcport = no


############## SIP TLS/SSL SUPPORT SECTION ##############

# Enable TLS/SSL Decryption
# To decrypt TLS-encrypted SIP traffic, enable ssl and specify the ssl_ipport option.
# Note that Diffie-Hellman ciphers cannot be decrypted without knowing session keys
# please check https://www.voipmonitor.org/doc/Tls for using voipmonitor keylogger capability

#ssl = yes
#ssl_ipport = 10.0.0.1 : 5061 /path/to/your.key

# Multiple Keys Support
# You can use multiple private keys separated by commas.
#ssl_ipport = 10.0.0.0/24 : 5061 /path/to/your.key,/path/to/other.key

# Reverse IP:Port Detection
# Enable to reverse the detection logic for ssl_ipport. Default is 'no'.
#ssl_ipport_reverse_enable = yes

# SSL Session Expiration
# SSL sessions will expire after this many hours. Default is 12.
#ssl_store_sessions_expiration_hours = 12

# UDP Session Key Parsing
# Support for parsing session keys sent to a specific UDP port. Default is disabled.
#ssl_sessionkey_udp = yes
#ssl_sessionkey_udp_port = 1234
#ssl_sessionkey_udp_ip = 192.168.178.0/24

# Preserve SSL Keys Between Restarts
# Choose how SSL/TLS keys are stored: 'persistent' (InnoDB) or 'memory'.
# Default is 'persistent', which retains keys even after database service restarts.
#ssl_store_sessions = persistent

# Decryption Library
# Choose the library used for decryption: 'dssl' or 'wireshark (ws)'. Default is 'dssl'.
#ssl_tls_12_sessionkey_mode = dssl

# Ignore Invalid MAC
# Ignore SSL/TLS packets with an invalid MAC. Default is 'yes'.
#ssl_ignore_error_invalid_mac = yes


########### SRTP CONFIGURATION ###################

# SRTP Decryption
# This section deals with Secure RTP (SRTP) decryption, including both RTP and RTCP streams.
# Supported encryption algorithms for keys are:
# AES_CM_128_HMAC_SHA1_32
# AES_CM_128_HMAC_SHA1_32
# AES_CM_128_HMAC_SHA1_80

# Decryption Options
# By default, the sniffer only decrypts RTCP while storing RTP data as-is.
# If you want to decrypt and store RTP data in pcaps, enable this option.
# If you want to decrypt only rtp dtmf use srtp_rtp_dtmf option 
#srtp_rtp = no
#srtp_rtcp = yes
#srtp_rtp_dtmf = no

# DTLS Decryption
# DTLS decryption is enabled by default.
# It requires a keylogger to be running, or session keys must be sent to Voipmonitor.
#srtp_rtp_dtls = yes

# DTLS queue settings
# Enables the queue; if the queue is not enabled, DTLS packets may be lost, and decryption may fail.
#ssl_dtls_queue = yes

# The time after which DTLS packets in the queue expire and are discarded.(10 s is default)
#ssl_dtls_queue_expiration = 10

# When srtp_rtp_local_instances option enabled, each RTP stream creates its own instance for decryption.
# Otherwise, a decryption instance is created jointly for SIP/SDP details of IP/port (in the sniffer for the index in the ip_port table).
#srtp_rtp_local_instances = no


# Allows DTLS packets to remain in the queue after their first successful use, expiring only after the set time. Disabled by default
# This is particularly useful if `srtp_rtp_local_instances = yes` is enabled (see above).
#ssl_dtls_queue_keep =  no

# The parameter ssl_sessionkey_keep is not just related to DTLS. It ensures that the received keylogger key remains in processing until it expires, rather than being discarded after its first successful use.
#ssl_sessionkey_keep = no

# ssl_dtls_handshake_safe options allows to use various approaches in handling the DTLS packets. Default is no. (Read more about types of handling DTLS packets in TLS dedicated doc on voipmointor.org site voipmonitor.org/doc/Tls)
#    no - DTLS packets queue used
#  only - Unified DTLS Packet Processing
#   yes - both methods used DTLS packets queue has the priority
#   ext - both methods used Unified DTLS Packet Processing has the priority
#ssl_dtls_handshake_safe = no

# The pseudoparameter ssl_dtls_boost is disabled by default. When enabled it enables following options
#  ssl_dtls_queue_expiration = 30
#  ssl_sessionkey_keep = yes
#  ssl_dtls_queue_keep = yes
#  ssl_dtls_handshake_safe = ext
#  ssl_dtls_rtp_local = yes
#ssl_dtls_boost = no

####################################

# Caller/Called Identity Configuration

# Update Caller or Called Numbers from Remote-Party-ID Tags
# If enabled, the system will update caller or called numbers based on the Remote-Party-ID SIP header.
# The 'party' attribute (usually 'calling' or 'called') will determine which number to update.
# Multiple parameters can be specified (separated by commas or semicolons), with the first taking priority.
# The Remote-Party-ID tag will be updated with every SIP packet, not just the first INVITE.
# Default is not set.
#remoteparty_caller = calling
#remoteparty_called = called

# Use P-Asserted-Identity for Caller Info
# If enabled, the SIP P-Asserted-Identity header will be used to obtain the caller's name and number.
# If the caller ID is anonymous and P-Asserted-Identity is present, this option will use the number from P-Asserted-Identity.
#passertedidentity = no

# Parse Only Numbers from P-Asserted-Identity
# If set to 'yes', only the number part of the P-Asserted-Identity will be parsed, ignoring any other attributes.
# Default is 'yes'.
#callernum_numberonly = yes

# Use P-Preferred-Identity for Caller Info
# Similar to P-Asserted-Identity, but uses the SIP P-Preferred-Identity header.
#ppreferredidentity = no

# Priority of Remote-Party-ID Over Others
# If set, the Remote-Party-ID SIP header will take priority over P-Asserted-Identity and P-Preferred-Identity.
#remotepartypriority = no

# Caller Destination Number from INVITE URI or 'To:' Header
# Controls whether the system takes the destination number from the INVITE URI or the 'To:' header in SIP messages.
# '1' uses the 'To:' header, '2' uses the INVITE URI.
# Default is '1'.
#destination_number_mode = 1

# This setting controls whether the called number should be updated based on the 'To:' header
# from each incoming INVITE request. By default, this is enabled to support overlap dialing as per RFC 3578.
# If you want to disable this behavior and only consider the number from the first INVITE, set this to 'no'.
#sipoverlap = yes

# This setting is similar to 'sipoverlap', but it disregards the source IP address of the INVITE packet.
# If the source IP matches the first INVITE, the 'sipoverlap' option will update the called number from the latest INVITE.
# When 'last_dest_number' is enabled, the destination number will always be taken from the latest INVITE, regardless of source IP.
# The default value for this setting is 'no'.
#last_dest_number = yes

# if you want to update destination number when callee answer for case where multiple phones (hunt group) are called within the same
# SIP Call-ID enable this option which matches it based on 200 OK and SIP branch.
#update_dstnum_onanswer = no

# Enable this option to update the destination number when the callee answers, useful for scenarios involving multiple phones 
# (e.g., hunt groups) being called under the same SIP Call-ID. This feature matches the destination number based on the 
# 200 OK response and the SIP branch.
# The default setting is 'no'.
#update_dstnum_onanswer = no

# measure response time between INVITE and Trying. By default it measures it from the corresponding INVITE and Trying. 
# setting this option to yes will measure delay from the first INVITE 
# default no
#response_time_from_first_invite = no

#########    Call Timeout and Termination Configuration     ##############

# Absolute Timeout: Ends a call after N seconds to prevent large pcap files and memory usage. 
# Default is 4 hours (4 * 3600 seconds). If a call ends due to this timeout, 'cdr.bye' will be set to 102.
#absolute_timeout = 14400

# BYE Timeout: Ends a call N seconds after receiving a BYE message, whether it's confirmed or not.
# Default is 1200 seconds (20 minutes).
#bye_timeout = 1200

# Confirmed BYE Timeout: Ends a call N seconds after receiving a confirmed BYE message even if RTP packets are still coming
# Default is 600 seconds.
#bye_confirmed_timeout = 600

# Ignore RTP After BYE: Stops processing any RTP packets after the first BYE message.
# Default is 'no'.
#ignore_rtp_after_bye = no

# Ignore RTP After Confirmed BYE: Stops processing any RTP packets after a confirmed BYE message.
# Default is 'yes'.
#ignore_rtp_after_bye_confirmed = yes

# Ignore RTP After Confirmed CANCEL: Stops processing any RTP packets after a confirmed CANCEL message.
# Default is 'yes'.
#ignore_rtp_after_cancel_confirmed = yes

# SIP Responses Ignoring RTP: List of SIP response codes after which RTP processing will be stopped.
# default is 408;480;486;487;481;600;503
#ignore_rtp_after_response = 408;480;486;487;481;600;503

# Timeout for SIP 300 Redirect: Time to wait for a packet when there's a SIP 300 redirect.
# Default is 300 seconds.
#redirect_response_300_timeout = 300

# Get Reason Header: Fetches the Q.850 Reason header from BYE or CANCEL packets.
# Default is 'yes'.
#get_reason_from_bye_cancel = yes

# Ignore Duration After Confirmed BYE: Sets duration and connect duration based on confirmed BYE.
# Default is 'yes'.
#ignore_duration_after_bye_confirmed = yes

# Detect Alone BYE: Flags a CDR if a BYE message is alone within a dialog with a "transaction does not exist" reply.
# when enabled the sniffer will use this query: update cdr set flags = coalesce(flags, 0) | 8 where id = ( select max(cdr_id) from cdr_next where calldate > '2024-01-13 16:10:13' and fbasename = 'E364ECDC-AC2E11EE-9EA483D2-28AADA49@1.2.3.4' limit 1)
# which can lead to excessive DB load - use with caution. 
# Default is 'no'.
#detect_alone_bye = yes

# One Way Timeout: Ends a call if it doesn't receive any reply from the other side within N seconds.
# Default is 15 seconds. If a call is terminated due to this timeout, 'cdr.bye' will be set to 101.
#onewaytimeout = 15

# SIP Without RTP Timeout: Ends a SIP call that doesn't have any associated RTP after N seconds.
# Default is 1 hour (3600 seconds).
#sipwithoutrtptimeout = 3600

# RTP Timeout: Closes a call if no RTP or RTCP packets are received within N seconds.
# Default is 5 minutes (300 seconds).
#rtptimeout = 300

### Buffer and Thread Configuration #############

# Ringbuffer: A circular memory queue in kernel memory space used by libpcap to deliver packets to voipmonitor.
# Recommended to be set to at least 500 for network rates > 100 Mbit.
# Max value is 2000 MB. Default is 50 MB.
#ringbuffer = 50

# Packet Buffer: Caches packets after they are read from the ringbuffer.
# Enabled by default. Disabling is not recommended.
#packetbuffer_enable = yes

# Packet Buffer Compression: Enables or disables compression of the packet buffer.
# Disabled by default.
#packetbuffer_compress = no

# Compression Ratio: Adjusts the compression ratio for the packet buffer.
# 100 means full compression. Lower this if CPU is the bottleneck.
#packetbuffer_compress_ratio = 100

# Max Buffer Memory: Sets the maximum amount of memory used for buffering packets.
# Useful when I/O or CPU blocks packet processing. Default is 2000 MB.
#max_buffer_mem = 2000

# Memory Purge Interval: Time interval for freeing up memory, in seconds.
# Default is 30 seconds.
#memory_purge_interval = 30

# Memory Purge Threshold: Amount of memory to be purged before memory is actually released.
# Default is 500 MB. It also considers 10% of total memory.
#memory_purge_if_release_gt = 500

# use huge pages which lowers TLB 
# enabling this will automatically drop caches and compact memory followed by huge pages allocations 
#hugepages_max = 80000

# RTP Threads: Sets the number of threads for processing RTP packets.
# Default is the number of available CPUs. Setting this to 0 turns off threading.
#rtpthreads = 0

# RTP Threads Start Count: Initial number of RTP threads when the sniffer starts.
# Adjust this only for synthetic tests. Default is 1.
#rtpthreads_start = 1


####    Jitter Buffer Simulator Configuration  ##########

# Voipmonitor uses three types of jitterbuffer simulators to compute MOS score by default.
# These are CPU-intensive tasks, so disable some if CPU usage is high.
# configuration option no will disable emul;ation of the jitter and will set 4.5 to it. null option will set NULL value to it. 

# Fixed 50ms jitterbuffer simulation, saved in cdr.[ab]_f1.
# Useful for devices with a fixed 50ms jitterbuffer.
#jitterbuffer_f1 = yes
#jitterbuffer_f1 = no
#jitterbuffer_f1 = null
#jitterbuffer_f1_jbsize = 50
#jitterbuffer_f1_resync_threshold = 100

# Fixed 200ms jitterbuffer simulation, saved in cdr.[ab]_f2.
# Recommended if you need to conserve CPU cycles.
#jitterbuffer_f2 = yes
#jitterbuffer_f2 = no
#jitterbuffer_f2 = null
#jitterbuffer_f1_jbsize = 200
#jitterbuffer_f1_resync_threshold = 200

# Adaptive jitterbuffer simulation up to 500ms.
#jitterbuffer_adapt = yes
#jitterbuffer_adapt = no
#jitterbuffer_adapt = null
#jitterbuffer_adapt_jbsize = 500
#jitterbuffer_adapt_resync_threshold = 500

# RTCP Jitter Limitation

# Ignore RTCP jitter values higher than this for calculating avg/max jitter values in cdr.
# Useful for modems with incorrectly calculated initial RTCP jitter.
# Original values are still stored in the pcap.
# Default is 0 (disabled).
#ignorertcpjitter = 0

# MOS Score Degradation

# Do not lower MOS score for RTP packet gaps without sequence gaps but with valid timestamp continuation.
# Useful for older Asterisk behavior.
# Default is 1000.
#ignore_mos_degradation_in_rtp_pause_without_seq_gap = 1000

# Packet Loss Concealment (PLC) Configuration

# Enables or disables Packet Loss Concealment.
# PLC is used to mitigate the effects of packet loss in VoIP.
# Default is to not disable plc "no" 
#plcdisable = no

# The "callslimit" parameter sets the maximum number of concurrent calls that Voipmonitor will process. 
# If the number of calls exceeds this limit, any additional calls initiated by an INVITE will be ignored.
# Setting this value to 0 means there is no limit on the number of concurrent calls.
# Uncomment the following line and set a value to enable this limit.
# default is 0 (inlimited)
#callslimit = 0

# The "cdrproxy" parameter controls how Voipmonitor handles SIP sessions that pass through multiple SIP proxies.
# When enabled (default), Voipmonitor will track all proxy IPs and make them searchable in the GUI and database.
# In the CDR (Call Detail Record), the destination SIP column will contain the destination IP from the latest INVITE,
# and all proxy IPs will be stored in a separate table called "cdr_proxy".
# If disabled, the destination SIP column in the CDR will only store the destination IP from the first INVITE.
# Subsequent INVITEs with the same source IP will overwrite this information.
# Uncomment the following line to set this option. Default is enabled (yes).
#cdrproxy = yes

# The "cdr_ua_enable" parameter controls whether the cdr.a_ua and cdr.b_ua fields are stored in the database.
# This option is a workaround for high CDR (Call Detail Record) rate situations where the CPU is not powerful enough
# to store records in real-time. Use this option only if you have more than 1000 unique user agents and performance issues.
# This option may be deprecated in future versions as the routine gets optimized.
# Uncomment the following line to set this option. Default is enabled (yes).
#cdr_ua_enable = yes

# The "cdr_ua_reg_remove" parameter allows you to remove specific strings from the user agent field before storing it
# in the database. This helps prevent the cdr_ua table from growing excessively.
# Multiple regex patterns can be set for removal.
# Uncomment the following lines to set this option.
#cdr_ua_reg_remove = \([0-9a-z\-]+\)$
#cdr_ua_reg_remove = -RMR[0-9a-z\-]+$

# The "cdr_ua_reg_whitelist" parameter allows only user agents that match the specified regex to be stored.
# This is evaluated after the cdr_ua_reg_remove option (if enabled).
# Uncomment the following lines to set this option. It is disabled by default.
#cdr_ua_reg_whitelist = ^Cisco
#cdr_ua_reg_whitelist = C610

# Enable text normalisation of the user agent string before storing it in the database.
cdr_ua_normalisation = yes

# This setting enables deduplication of packets based on a md5 checksum. 
# If a packet has the same checksum as the previous packet, it will be discarded.
# Deduplication is disabled by default 
# new experimental faster algorithm "murmur" is available instead of the default md5 
#deduplicate = yes

# This setting allows deduplication to ignore the TTL (Time To Live) field in the IP header.
# Enabling this means that deduplication will not consider differing TTL values.
# default is yes 
#deduplicate_ipheader_ignore_ttl = yes

# Enable this setting if you want to automatically use blocks for deduplication or defragmentation 
# when sniffing from multiple sources or interfaces.
# Useful when there are multiple sniffers or if packets are mirrored.
# default is no 
#auto_enable_use_blocks = no

# default is to include IP headers in the deduplication process.
# Option 'ip_only' will count only IP addresses from the IP header in the checksum.
# default is yes
#deduplicate_ipheader = yes

# This setting excludes the UDP header checksum when comparing packets for deduplication.
# This can be useful for ignoring minor variations in UDP headers.
# The default is to ignore the UDP checksum (yes)
#deduplicate_udpheader_ignore_checksum = yes

# create own large UDP packet in case of decapsulation from IP in IP
#default is no
#virtualudppacket = no


##   SIP REGISTER OPTIONS SUBSCRIBE NOTIFY  ##############

# Controls the analysis of SIP REGISTER messages. They can be stored to a PCAP file, seen in SIP REGISTER Active, or also stored to the Database.
# Default is 'no'. Options include 'yes', 'nodb', and 'no'.
# The old non-public sip-register-save-all option is equal sip-register = yes and save-sip-register = yes.
sip-register = no

# Controls whether to store SIP REGISTER messages to disk. Note that in situations of high traffic, this could overload the file system. Default is 'no'.
#save-sip-register = no

# Time to wait in seconds for a reply to the first SIP REGISTER message before removing it from memory. Default is 5 seconds.
#sip-register-timeout = 5

# Option to avoid saving failed registrations due to timeout. Default is 'no', meaning failed registrations are saved by default.
#sip-register-timeout-disable_save_failed = yes

# If MySQL binary logging is enabled, this option will skip logging inserts into the 'active' table (which is of MEMORY type).
# To still enable replication despite potential huge I/O impact, set this to 'no'.
#sip-register-active-nologbin = yes

# Option to ignore failed SIP registrations that end with a 401 response code. Default is 'no'.
#sip-register-ignore-res401 = no

# Option to ignore failed SIP registrations that end with a 401 response code and a nonce value that has changed. Default is 'no'.
#sip-register-ignore-res401-nonce-has-changed = no

# Option to consider source SIP IP address in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-compare-sipcallerip = no

# Option to consider source SIP port in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-compare-sipcallerport = no

# Option to consider destination SIP IP address in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-compare-sipcalledip = no

# Option to consider destination SIP port in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-compare-sipcalledport = no

# Option to consider the domain part of the 'To' header in SIP REGISTER packets when evaluating matches. Default is 'yes'.
#sip-register-compare-to_domain = yes

# Option to consider the domain part of the 'From' header in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-state-compare-from_domain = no

# Option to consider the SIP Authentication Realm in SIP REGISTER packets when evaluating matches. Default is 'no'.
#sip-register-state-compare-digest_realm = no

# Option to consider the number in the 'Contact' header when evaluating SIP REGISTER sessions. Default is 'yes'.
#sip-register-state-compare-contact_num = yes

# Option to consider the domain in the 'Contact' header when evaluating SIP REGISTER sessions. Default is 'yes'.
#sip-register-state-compare-contact_domain = yes

# Maximum number of request packets with the same call ID without an appropriate response before terminating the current register session.
# Default is 4.
#sip-register-max-registers = 4

# Maximum number of packets (requests and responses) with the same call ID without an appropriate evaluation before terminating the current register session.
# Default is 20.
#sip-register-max-messages = 20

# Time interval in seconds between saving the same states into the register state table.
# Default is 600 seconds.
#sip-register-state-timeout = 600

# Enable or disable the analysis and storage of SIP MESSAGE requests. The default is 'yes'.
# THIS METHOD IS USED EXCLUSIVELY FOR CARRYING TEXT MESSAGES (INSTANT MESSAGING) OVER SIP.
sip-message = yes

# Controls the analysis of SIP OPTION, SUBSCRIBE, NOTIFY messages. They can be stored to a PCAP file, seen in SIP Opt. Active, or also stored to the Database.
# Default is 'no'. Options include 'yes', 'nodb', and 'no'.
sip-options = no

# Controls whether to store SIP OPTIONS messages to disk. Note that in situations of high traffic, this could overload the file system. Default is 'no'.
#save-sip-options = no

# Enable or disable the analysis and storage of SIP SUBSCRIBE requests. Default is 'no'.
sip-subscribe = no

# Controls whether to store SIP SUBSCRIBE messages to disk. Like OPTIONS, this could overload the system in high-traffic scenarios. Default is 'no'.
#save-sip-subscribe = no

# Enable or disable the analysis and storage of SIP NOTIFY requests. Default is 'no'.
sip-notify = no

# Controls whether to store SIP NOTIFY messages to disk. This is similar to OPTIONS and SUBSCRIBE in that it can overload the system in high-traffic scenarios. Default is 'no'.
#save-sip-notify = no

# Enable or disable grouping of SIP OPTIONS, NOTIFY, SUBSCRIBE messages by VLAN ID. Useful if you need to restrict users by VLAN ID. Default is 'no'.
#sip-msg-compare-vlan = no

# Controls whether the source IP address should be considered when determining if SIP OPTIONS, NOTIFY, SUBSCRIBE messages are the same. Default is 'yes'.
#sip-msg-compare-ip-src = no

# Similar to the above, but for the destination IP address. Default is 'yes'.
#sip-msg-compare-ip-dst = no

# Controls whether the source port should be considered when determining if SIP OPTIONS, NOTIFY, SUBSCRIBE messages are the same. Default is 'yes'.
#sip-msg-compare-port-src = no

# Similar to the above, but for the destination port. Default is 'yes'.
#sip-msg-compare-port-dst = no

# Controls whether the source number should be considered when determining if SIP OPTIONS, NOTIFY, SUBSCRIBE messages are the same. Default is 'yes'.
#sip-msg-compare-number-src = no

# Similar to the above, but for the destination number. Default is 'yes'.
#sip-msg-compare-number-dst = no

# Controls whether the source domain should be considered when determining if SIP OPTIONS, NOTIFY, SUBSCRIBE messages are the same. Default is 'yes'.
#sip-msg-compare-domain-src = no

# Similar to the above, but for the destination domain. Default is 'yes'.
#sip-msg-compare-domain-dst = no

# Enable or disable saving user-agent information to the database from options, subscibe, notify. Default is 'no'.
#sip-msg-save-ua = no

##########################################################


# Ignore CDR records based on a list of last SIP response codes such as 302, 303, etc.
# Parameters include a colon-delimited list of response codes or even a wildcard.
# Additional filters can be applied like 'name', 'number', and 'ip'.
#cdr_ignore_response = 302,303,4
#cdr_ignore_response = 503 lsr=Call\sThrottled, 403 name=abc ip=1.2.3.4, 404 number=%123%, 405 number=.*123.* ip=1.2.3.0/24

# Limit the length of telephone numbers in the SIP response text.
# For example, '503 No Service for 123456789' becomes '503 No Service for 123'.
# This feature is disabled by default.
#cdr_sip_response_number_max_length = 3

# Remove specific strings from the SIP response text before storing it in the database.
# Multiple regular expressions can be set.
#cdr_sip_response_reg_remove = \([0-9a-z\-]+\)$

# Enable text normalisation of the SIP response text before storing it in the database.
cdr_sip_response_normalisation = yes

# Enable or disable storing reasons in the cdr_reason table.
#cdr_reason_string_enable = yes

# Remove specific strings from the SIP reason text before storing it in the database.
# Multiple regular expressions can be set.
#cdr_reason_reg_remove = \([0-9a-z\-]+\)$

# Enable text normalisation of the SIP reason text before storing it in the database.
cdr_reason_normalisation = yes

# Control whether to save CDRs to MySQL and perform partition operations.
# When set to 'yes', CDRs will not be saved.
# default is no
#nocdr = no

# By default, all SIP calls will be ignored unless capture rules based on IP or Telephone numbers are set.
#skipdefault = yes

# Don't store CDR if the content-type in the INVITE is csta+xml. Default is 'no'.
#enable_content_type_application_csta_xml = no

# Only save CDRs to the database if the call was answered. Default is 'no'.
#cdronlyanswered = yes

# Check for an existing CDR with the same sip.Call-ID and update it if the new CDR contains RTP and the old one does not.
# Useful for environments where SIP and RTP are mirrored to different nodes.
# Default is 'off'.
#cdr_check_exists_callid = yes

# Check for unique call-id only with specific sensor IDs.
# Use NULL for sensors with no id_sensor set.
#cdr_check_unique_callid_in_sensors = 1,3,NULL,5

# Only save CDRs to the database if the call has RTP. Default is 'no'.
#cdronlyrtp = yes

# Set the default time period for aggregated CDR statistics.
# The default time interval is 15 minutes.
#cdr_stat_interval parameter = 15 

# Enable aggregated CDR statistics for both source and destination.
#cdr_stat = both

# Filter RTP packets based on the VLAN tag found in the initial SIP packet.
# This setting is useful in multi-VLAN environments where a single sniffer is capturing traffic for multiple PBX systems with the same IP addresses.
# When set to 'no', RTP packets from different VLANs but with the same IP addresses will be mixed together.
# Default is 'no'.
#vlan_siprtpsame = no

###############################################################################
# Cisco Skinny Protocol (SCCP) Configuration                                 #
###############################################################################

# Enable or disable the monitoring of the Cisco Skinny (SCCP) protocol.
# The default setting is disabled, and the default port used is TCP port 2000 when enabled.
#skinny = yes

# You can specify multiple ports for monitoring Skinny protocol.
#skinny_port = 2000
#skinny_port = 12000

# Some Cisco Call Managers are configured to always receive calls on the same UDP port, causing one-way or mixed recordings.
# If this is the case, specify the IP address of the Cisco Call Manager here.
# This assumes that Cisco phones use symmetric RTP (same UDP port for both sending and receiving RTP).
#skinny_ignore_rtpip = 10.1.1.1

###############################################################################
# MGCP Protocol Configuration                                                 #
###############################################################################

# Enable or disable the monitoring of the MGCP protocol.
# By default, the MGCP protocol is disabled.
#mgcp = yes

# Default MGCP ports for Gateway and Call Agent (change only if they differ from the defaults). You can enter more ports as the sipport option
# TCP and UDP ports for MGCP Gateway
# multiple ports is possible 
#tcp_port_mgcp_gateway = 2427
#udp_port_mgcp_gateway = 2427

# TCP and UDP ports for MGCP Call Agent
#tcp_port_mgcp_callagent = 2727
#udp_port_mgcp_callagent = 2727

###############################################################################
# .pcap File Configuration                                                    #
###############################################################################

# Set a maximum size limit (in MB) for each .pcap file. Once this limit is reached, packet recording to that file will stop,
# although analysis for loss/jitter etc. will continue. By default, this is disabled.
#maxpcapsize = 500

# Main directory where all types of files (pcap, wav, graph) will be stored.
spooldir = /var/spool/voipmonitor

# If you want to specify different directories for RTP, graph, and audio files, set them here.
# You MUST also configure this in the GUI.
#spooldir_rtp =
#spooldir_graph =
#spooldir_audio =

# Option to set a secondary storage directory. Useful for storing some calls with a different autoclean setup.
#spooldir_2  = /var/spool/voipmonitor2

# Set file and directory permissions for the spooldir.
#spooldir_file_permission = 0666
#spooldir_dir_permission = 0777
#spooldir_owner = root
#spooldir_group = root

# Enable this option to organize pcap files in sub-folders by sensor ID or name. Use this only if you are not using a database.
#spooldir_by_sensorname = yes
#name_sensor = sensor1

# Sets the buffer size (in bytes) for each file type (pcap, graph). This optimizes disk I/O.
# The default and optimal value is 8184 bytes.
#pcap_dump_bufflength = 8184

# Enable or disable file compression for both SIP and RTP packets. Defaults to 'yes'.
#pcap_dump_zip = yes

# Compression settings for SIP packets. Available options: no, zstd, gzip, lzo, lz4.
# note: gzip = zstd, for true gzip please set gzipforce
#pcap_dump_zip_sip = zstd
# Compression level for SIP. For gzip, default is 6; for zstd, default is 3.
#pcap_dump_ziplevel_sip = 3

# Compression settings for RTP packets. Available options: no, zstd, gzip, lzo, lz4.
# Use 'lz4' for fastest compression and 'lzo' for a balance between speed and compression ratio.
pcap_dump_zip_rtp = lzo

# Compression settings for graph files. By default, it is not enabled as .graph files are already stored in .tar.zstd format.
#pcap_dump_zip_graph = no

# Universal compression level setting for SIP, RTP, and graph files.
#pcap_dump_ziplevel = 3

# Initial number of threads for compressing pcap files. Default is 1. Will auto-scale based on CPU usage.
#pcap_dump_writethreads = 1

# Maximum number of threads allowed for pcap compression. 
# The actual limit is the minimum of available CPU cores, this value, and 32.
#pcap_dump_writethreads_max = 32

# Enable asynchronous writing to disk for pcap files. 
# This ensures that packet processing is not paused due to I/O blocks. Keep this always enabled.
#pcap_dump_asyncwrite = yes


##############################################################################
# TAR File Storage Configuration for SIP/RTP/GRAPH
#
# Note: Changing the default configuration is not recommended unless you are sure of what you're doing.
#
# Why TAR: Storing numerous individual pcap files can strain the filesystem with high random write IOPS.
#          TAR files serialize these writes into a single stream, which can then be compressed more efficiently.
#
# TAR Filename Format: start of the call - year-mon-day/hour/minute/sip.tar
#
# Enabling TAR-level compression will override individual pcap compression settings.
# 
# default voipmonitor configuration is: 
# sip pcaps are concatenated in sip.tar and compressed by zstd level 3 (sip.tar.zstd)
# RTP pcaps are compressed individually by LZ4 and concatenated in uncompressed tar file (rtp.tar) 
# graph files are concatenated in tar file compressed by zstd level 3 (graph.tar.zstd)
#
# Without tar compression, the sniffer logs the offset for each file in the database. This ensures that 
# extracting that pcap file from the tar file is efficient with minimal I/O seeks (default for rtp tar) 
#
# Enabling compression for SIP/RTP or GRAPH will automatically deactivate options: 
# pcap_dump_zip, pcap_dump_zip_sip, pcap_dump_zip_rtp, and pcap_dump_zip_graph. 
# This means that uncompressed pcap files will be present inside the tar file.

# Enable or disable the creation of tar files. Default is 'yes'.
tar = yes

# Max number of threads used for tar compression. Can be monitored via syslog.
# default is 8
#tar_maxthreads = 8

# SIP TAR Compression settings.
# Available options: none, gzip, zstd, lzma. Overrides individual SIP pcap compression.
# note: gzip = zstd, for true gzip please set gzipforce
tar_compress_sip = zstd
# Level of compression for SIP TAR. Ranges for gzip (1-9) and zstd (1-19 or negative numbers for strategy 1).
# default zstd level is 3 but it uses twice memory with slighly better compression only (zstd compression level is 1-19)
tar_sip_level_zstd = 1
# gzip level 6 
#tar_sip_level_gzip = 6
#tar_sip_level_lzma 

# Strategy for zstd compression of SIP TAR. Ranges from 0 to 9.
tar_sip_strategy_zstd = 0

# RTP TAR Compression settings. Default is 'no' as individual RTP pcaps are compressed with lzo by default
tar_compress_rtp = no
# Compression level for RTP TAR if enabled. Usually 1 for gzip.
#tar_rtp_level_zstd = 1
#tar_rtp_level_gzip = 1
#tar_rtp_level_lzma
# Strategy for zstd compression of SIP TAR. Ranges from 0 to 9.
#tar_sip_strategy_zstd = 0

# Graph TAR Compression settings. Default is zstd.
tar_compress_graph = zstd
# Level of compression for .grah TAR. Ranges for gzip (1-9) and zstd (1-19 or negative numbers for strategy 1).
# default zstd level is 3 but it uses twice memory with slighly better compression only (zstd compression level is 1-19)
tar_graph_level_zstd = 1
# gzip level 6 
#tar_sip_level_gzip = 6
#tar_sip_level_lzma 
# Strategy for zstd compression of SIP TAR. Ranges from 0 to 9.
#tar_sip_strategy_zstd = 0

# Move the tar file to another directory after it's closed. Useful for network or larger storage.
# Options: no (default), yes (move and delete original), copy (leave the original)
#tar_move = yes
#tar_move_destination_path = /mnt/nfs/storage

# Number of concurrent threads for moving tar files. Default is 2.
#tar_move_max_threads = 2

# For specific spooldir configurations, this option can help manage source path trimming before the move.
#tar_move_source_trim_path = /var/spool

##########  End of TAR File Storage Configuration #######################################

# Cache directory for storing pcap and graph files. These files are moved to the spool directory after the call ends.
# this feauture is usefull only in case .tar format is not enabled which is not recommended
# Use RAM or SSD for better performance.
#cachedir = /dev/shm/voipmonitor

# Maximum number of open files. The default is 65535.
# default is 65535
#openfile_max = 65535

# Replace specific characters with underscores in the names of saved files.
#convertchar = :

# Name the pcap file based on a custom SIP header.
#fbasenameheader = X-custom-filename

# Enable SIP packet saving to pcap file (or tar file) 
savesip = yes

# Store SIP history to database. This is optional and can include requests, responses, or all.
# default is disabled
#save_sip_history = requests,responses

# Store SIP responses to a separate table. Disabled by default to prevent database overload.
#save_sip_responses = no

# Enable millisecond time precision in the database.
# default is yes
time_precision_in_ms = yes

# Save RTP packets to pcap file (or tar). For saving only RTP header set it to 'header'
# default is no
savertp = yes

# Option to zero out all RTP data. 
# default is no
#null_rtppayload = NO

# Store video RTP packets. 
# default is no
#savertp_video = no/yes/header/cdr_only

# Save RTCP packets to a pcap file.
savertcp = yes

# Generate .wav or .ogg or .mp3 file for every call. This is not neccesasry to enable to be able to listen / download audio because it can be extracted from stored pcap files.
# possible values are wav | ogg | mp3
# Note: enablding this option can overload CPU and IO 
# default is no
#saveaudio = wav

# Store audio only for connected calls.
# defaul is no
#saveaudio_afterconnect = no

# Generate silence audio from the first invite. It makes the audio length match the SIP signalization length.
# default is yes 
#saveaudio_from_first_invite = yes

# Save caller in the left audio channel and called in the right channel.
# default is yes
#saveaudio_stereo = yes

# MP3 audio quality settings ranging 0 - 9 (9 is the worst)
# default is 5
#mp3_quality = 5

# OGG audio quality settings.
# default is 0.4
#ogg_quality = 0.4

# Send web request for each audio file creation 
#curl_hook_wav = http://127.0.0.1:8080/your-script-path

# Adjust the number of threads for audio processing.
# default is 10 
#audioqueue_threads_max = 10

# Enable storing DTMF into the database (SIP INFO and RTP RFC) 
# default is no
#dtmf2db = no

# enable inband dtmf detection 
# G711 only 
# note: enabling will consume more CPU 
# default is no
#inbanddtmf = no

# Enable silence detection 
# G711 only 
# note: enabling will consume more CPU 
# default is no
#silencedetect = no
#silencethreshold = 512

# enable clipping detection 
# G711 only
# note: enabling will consume more CPU
# default is no
#clippingdetect = no

# FAS (False Answer Supervision) detection
# based on ring detection after 200 OK (call connect) 
# only for G711
# note: enabling will use more CPU 
# default is no
#fasdetect = no


# save-energylevels option will store average 16bit energy levels for every received RTP packet (data are gzipped).
# These values are stored in the cdr_rtp_energylevels table, which will be automatically created if it doesn't exist.
# Optionally, you can set the 'energylevelheader' to store energy levels only for calls that include this specific SIP header.
# Enabling this option will require the G711 decoder to be active, consuming additional CPU resources.
# This feature only supports the G711 codec.
# Example SQL query to retrieve the energy levels:
#       select
#       cdr_rtp_energylevels.*,
#       cdr_rtp.*,
#       if(cdr_rtp.flags & (1<<2), "caller", if(cdr_rtp.flags & (1<<3), "called", "unknown")) as direction
#       from cdr_rtp_energylevels
#       left join cdr_rtp on (cdr_rtp.cdr_id = cdr_rtp_energylevels.cdr_id and cdr_rtp.index = cdr_rtp_energylevels.index)
#       where cdr_rtp_energylevels.cdr_id = 2177862
# save-energylevels can be set to 'yes' or 'no'
# dfault is no
#save-energylevels = no

# If set, only calls with this header will have their energy levels stored
#energylevelheader = X-energlvl

# Energy levels are calculated using the jitter buffer by default. Empty frames are counted as 0.
# If all jitter buffers are disabled, energy levels will be calculated without using a jitter buffer, and silence will not be counted as zero.
# default is yes 
#save-energylevels-via-jb = yes

# SIP-ALG detection can be used to identify when SIP-ALG is being used on routers or firewalls, especially if the SIP client isn't using a public IP address.
# By default, this setting is disabled.
#sipalg_detect = no

# save .graph data for web GUI (by default they are .tar.gz ) 
# default is no
savegraph = yes

# save audio graph files to spool/AUDIOGRAPH - wave + spectrogram 
# if savertp = yes audio graph files can be generated from pcap file directly without needs to enable audiograph
# default is no
# for auto cleaning see maxpoolaudiographsize and maxpoolaudiographdays
#save_audiograph = yes
#audiograph_ms_per_pixel = 0 // auto
#audiograph_spectrogram_height = 32
#audiograph_spectrogram_jpeg_quality = 10


# If any SIP message during the call includes the header "X-VoipMonitor-norecord" all SIP and RTP data will be deleted 
#norecord-header = yes

# If any SIP message during the call includes a DTMF INFO sequence of "*0" all SIP and RTP data will be deleted 
# Default: disabled
#norecord-dtmf = yes

# Enable the pausing of RTP/WAV recording when a DTMF sequence is detected.
# Default: disabled
#pauserecordingdtmf = *9

# Set the optional timeout between DTMFs when using the "pauserecordingdtmf" option. The default timeout is 4 seconds.
#pauserecordingdtmf_timeout = 4

# Pause or unpause recording when a SIP message with "182 Queued avaya-cm-data" is received. Disabled by default.
#182queuedpauserecording = no

# Pause or unpause audio recording based on the value of a user-defined header. Disabled by default.
# To pause audio recording, the header must contain the value 'pause' (e.g., "MyCustomPauseHeader: pause") in any SIP packet.
# Any other value in this header will unpause the recording (e.g., "MyCustomPauseHeader: unpause").
#pauserecordingheader = MyCustomPauseHeader


# Save all packets to a file named "SPOOL/dump-[interface]-[UNIX_TIMESTAMP].pcap".
#dumpallpackets = yes

# The new directory schema organizes files by year-month-day/hour/minute/[ALL|SIP|RTP|AUDIO].
# To use the older directory schema of year-month-day/*, enable 'spooldiroldschema = yes'.
# Note: Enabling this feature disables the 'cleanspool' function and the 'tar' option.
# Default: no
#spooldiroldschema = no


########### cleaning spool directory  ####################

# Enable or disable the cleaning of the spool directory. Default is 'yes'.
#cleanspool = yes

# each created file is indexed in SPOOLDIR/filesindex/ in hours interval and the file size is added to aggregation mysql table files. Cleaning
# procedure iterates through index files and unlink files without need to scan directories. This reduces IO to the minumum possible. 

# The cleaning procedure runs every 5 minutes, checking either file size or age based on the following options. Rules are executed in the listed order.
# The 'maxpoolsize' option deletes the oldest data hourly until the specified size limit is reached. 
# The 'maxpooldays' option retains data for a set number of days.
# Separate settings are available for SIP, RTP, and graph data, allowing different retention periods.
# All options can be activated simultaneously.

# Running the cleaning process can cause significant I/O load on the MySQL server. It's advisable to restrict cleaning to off-peak hours, e.g., between 1am and 5am (24-hour format).
# Default is unrestricted (0-24 hours).
#cleanspool_enable_fromto = 1-5

# It's recommended to set 'maxpoolsize' to the maximum disk space you are willing to allocate for sniffing. Sizes are in MB.

# Log all file deletion operations. Default is 'no'.
#all_unlink_log = no

# Set the default 'maxpoolsize' to 100 GB (102400 MB).

maxpoolsize		= 102400
#maxpooldays		= 30

#maxpoolsipsize		=
#maxpoolsipdays		=

#maxpoolrtpsize		=
#maxpoolrtpdays		=

#maxpoolgraphsize	=
#maxpoolgraphdays	=

#maxpoolaudiosize	=
#maxpoolaudiodays	=

#maxpoolaudiographsize  =
#maxpoolaudiographdays  =


# cleaning secondary storage
maxpoolsize_2		= 102400
#maxpooldays_2		= 30

#maxpoolsipsize_2	=
#maxpoolsipdays_2	=

#maxpoolrtpsize_2	=
#maxpoolrtpdays_2	=

#maxpoolgraphsize_2	=
#maxpoolgraphdays_2	=

#maxpoolaudiosize_2	=
#maxpoolaudiodays_2	=

# clean files which are not indexed
# default is no
#maxpool_clean_obsolete = yes


# If free disk space falls below 1% or 5GB (the default thresholds), the 'reindexfiles' procedure will run, and the cleaning process will restart.
# If these measures don't free up sufficient space, the 'maxpoolsize' will be adjusted to match the current size of the spool directory. 
# The system will aim to maintain a minimum of either 1% free space or 5GB.
# The 'cleanspool_enable_fromto' option is ignored in these emergency scenarios.
#
# defaul autocleanspoolminpercent is 1 and autocleanmingb is 5 
#autocleanspoolminpercent = 1
#autocleanmingb = 5

# The following is a useful shell command to delete all RTP files older than 7 days. Note that this is not a configuration option.
# find /var/spool/voipmonitor -maxdepth 1 -type d -mtime +7 -name '20*' | (while read d; do rm -rf $d/*/*/RTP; done)

########### end storing packets into pcap files ###############


# Enable MOS scoring for the G.729 codec. When enabled, calls with zero packet loss and stable delays will have a maximum MOS score of 3.92.
# For calls with packet loss or unstable delays, the MOS score will be calculated based on the ITU-T's objective PESQ method specific to the G.729 codec.
# If you want to use MOS as a comprehensive metric that combines both loss and delay into a single value, leave this setting disabled (the default).
# When set to 'no', MOS calculations will be performed as if using the G.711 codec.
#mos_g729 = no

# Configure the threshold for consecutive lost packets that are not counted as packet loss. By default, up to 1024 consecutive lost packets are ignored.
#ignore_mos_degradation_for_contiguous_packet_loss_greater_than = 1024

# ITU-T P.862 PESQ (Perceptual Evaluation of Speech Quality)
# The 'mos_lqo' feature compares prerecorded audio against a reference file (mos_lqo_ref). The audio duration should adhere to ITU-T guidelines (approximately 20-25 seconds).
# This feature cannot evaluate real-time calls.
# The 'pesq' binary is required, and you'll need an appropriate license for it (not provided; can be downloaded from ITU-T).
#mos_lqo = no
#mos_lqo_bin = pesq
#mos_lqo_ref = /usr/local/share/voipmonitor/audio/mos_lqe_original.wav
#mos_lqo_ref16 = /usr/local/share/voipmonitor/audio/mos_lqe_original_16khz.wav


# Enable storing the DSCP (Differentiated Services Code Point) value in the 'cdr.dscp' field, which is a 32-bit number. 
# The first 8 bits represent the DSCP value (6 bits) from SIP packets originating from the caller.
# The next 8 bits are taken from SIP packets originating from the callee.
# The following 8 bits come from RTP packets from the caller, and the last 8 bits are from RTP packets from the callee.
# Enabling this feature will automatically upgrade the 'cdr' table, which may take a considerable amount of time depending on the number of CDR records and your I/O speed.
# Default is 'yes'.
dscp = yes

# By default, the custom header (accessible via GUI -> Settings -> CDR Custom Headers) is overwritten by the most recent occurrence. 
# To retain the first occurrence instead, set this option to 'no'.
# The default setting is 'yes'.
#custom_headers_last_value = yes

# write empty header's value if header is missing in first packet and is present in next packets.
# default no
#allow_missing_header = true

# till version 29.0 was default custom header size in database 256 chars.
# higher versions have default size 1024 chars
# in both cases can be the size enlarged with this option
# custom_headers_max_size = 1024

# Enable storing the content of a custom header (typically "in-reply-to") in 'cdr_next.match_header'.
# This header is utilized in the related CDR GUI to match legs to a single call.
#matchheader = in-reply-to

# Enable call merging based on matching 'Call-ID'. The idea is that the second leg of the call, which has a different 'Call-ID', 
# includes a special header in its initial INVITE that contains the 'Call-ID' of the parent SIP call.
# The configuration option specifies the name of that header.
# To keep this header confidential, you can encrypt it using XOR and then encode it with Base64. If 'callidmerge_secret' is specified, 
# the header will be decoded using Base64 and XORed with this secret string.
#callidmerge_header = Parent-Call-ID
#callidmerge_secret = yourSecretString

# Enable merging calls based on alternative unique identifiers. This feature was specifically developed for Cisco CUCM but can 
# be applied to other headers as well. The 'call_id_alternative' configuration option specifies a list of SIP headers. The 
# content of these headers will be stripped of the ";" delimiter, if present.
# Example for Cisco CUCM (11.5):
#call_id_alternative = Session-ID,Join

# save port in domain user@domain:port 
# default is = no
#domainport = no

# The 'pcapcommand' option runs a specified command after the pcap file is closed (i.e., after the call ends). '%pcap%' serves 
# as a placeholder for the actual pcap file name. The execution is guaranteed to run in a serialized manner.
# WARNING: Using 'pcapcommand' involves forking the program, which is resource-intensive and can trigger TLB shootouts on multicore systems. 
# This may generate up to 500,000 interrupts per second, potentially causing the system to drop packets. Monitor system performance carefully 
# using the "vmstat 1" command, specifically the "in" column.
#pcapcommand = echo %pcap% >> /tmp/list

# The 'filtercommand' option runs a command for each call that matches 'script == 1' in 'filter_ip' or 'filter_telnum' (as set in the capture rules in the GUI).
# WARNING: Like 'pcapcommand', 'filtercommand' is implemented via program forking and poses the same performance risks. Monitor system performance closely.
# All non-alphanumeric characters in 'callid', 'dirname', 'caller', 'called', and 'calldate', except for '/', '#', ' ', '+', ':', '-', '.' and '@', are replaced with '_'.
#filtercommand = myscript '%callid%' '%dirname%' '%caller%' '%called%' '%calldate%'

# load capture rules from csv file - this file will be loaded first before mysql capture rules. First line has to contain columns name.
#capture_rules_telnum_file = capturerules.csv

# load capture rules of sip headers from csv file - this file will be loaded first before mysql capture rules. First line has to contain columns name.
#capture_rules_sip_header_file = capturerules_sip_header.csv

# if enabled CDRID:num will be printed to stdout on every CDR insert
# default is no 
#printinsertid = no

# enable monitoring IP traffic (experimental feature) 
#ipaccount = no
#ipaccountport = 22
#ipaccountport = 80
#ipaccountport = 443

# if https failes when upgrading the sniffer try also http
# default is no
#upgrade_try_http_if_https_fail = no

# set http proxy in case you want to use upgrades initiated from the GUI
#curlproxy = http://192.168.0.1:8080

# if you want to disable activechecks for sniffer in a cloud mode set following option to 0 (default is 60 seconds)
#cloud_activecheck_period=60

##############################
### Tunneling Port Options ###
##############################
# Configure ports for tunneling protocols. The default ports are set so that tunnel protocols are processed by default.
# To disable this processing, set the port to a zero value.

# Configure port for TZSP (TaZmen Sniffer Protocol, used by Mikrotik). Default is 37008 (0x9090).
#udp_port_tzsp = 37008

# Configure port for Layer 2 Tunneling Protocol (L2TP). Default is 1701.
#udp_port_l2tp = 1701

# Configure port for HP ERM Tunneling Protocol. Default is 7932. To disable, set to 0.
#udp_port_hperm = 7932

# Configure port for VXLAN. Default is 4789.
#udp_port_vxlan = 4789

# Enable or disable the extraction of SIP data from ICMP type 3 messages. Default is 'no'.
#icmp_process_data = no

# Audiocodes mirroring support (disabled by default).
#audiocodes = yes
#udp_port_audiocodes = 925
#tcp_port_audiocodes = 925

# Configure Audiocodes RTP and RTCP settings.
#audiocodes_rtp = no/YES/only/only_for_audiocodes_sip
#audiocodes_rtcp = no/YES/only/only_for_audiocodes_sip

# Restrict SIP packets to specific ports for Audiocodes.
#audiocodes_sip_ports = 5061,5068

# Store the IP addresses from IPinIP / GRE protocols in the database. Default is 'no'.
#save_ip_from_encaps_ipheader: yes/no
#save_ip_from_encaps_ipheader_only_gre: yes/no

# IPFIX options (tested with ACME / ORACLE SBC).
#ipfix = yes
#ipfix_bind_ip = 0.0.0.0
#ipfix_bind_port = 12345

# hep 
#hep=yes
#hep_bind_ip=IP
#hep_bind_port=PORT
#hep_bind_udp=yes|no

# workaround for kamailio in case it sets wrong protocol 
# default yes
#hep_kamailio_protocol_id_fix=yes


#####################################
# Kamailio Mirroring Using siptrace #
#####################################
# Add the following lines to your kamailio.cfg file:
# loadmodule "siptrace.so"
# modparam("siptrace", "trace_on", 1)
# modparam("siptrace", "duplicate_uri", "sip:10.0.0.1:5888")
# modparam("siptrace", "trace_to_database", 0)
# modparam("siptrace", "trace_mode", 4)
# modparam("siptrace", "xheaders_write", 1)
# Then include 'sip_trace();' in the request_route and other routes within your kamailio.cfg.

###############################################################################
# Whisper Transcription Configuration                                         #
###############################################################################

# Enable or disable the audio transcription feature.
# This is the main switch for the entire transcription module.
# Default is no.
#audio_transcribe = yes

# URL for whisper REST API transcription.
# If this URL is set, the sniffer will automatically use the REST API method
# for transcription, overriding the native and python methods.
#whisper_rest_api_url	= http://localhost:9000/asr?output=json&encode=true
#whisper_rest_api_url	= http://localhost:9000/asr_stereo?output=json&encode=true

# Mode for whisper REST API transcription.
# Options:
#   stereo (default) - sends one stereo WAV file and expects JSON response with left_channel and right_channel
#   split - sends two separate mono WAV files (original behavior)
#whisper_rest_api_mode	= stereo

# Enable native whisper transcription using whisper.cpp library.
# This is used if whisper_rest_api_url is not set.
# Default is no.
#whisper_native	= no

# Path to the whisper model file.
#whisper_model	= /path/to/ggml-base.en.bin

# Default language for transcription. Use 'auto' for automatic language detection.
#whisper_language	= auto

# Timeout in seconds for the whisper python script execution.
# This is used if both whisper_rest_api_url and whisper_native are not set/enabled.
# Default is 0 (disabled).
#whisper_timeout	= 60

# Enable deterministic mode for whisper (python script only).
# Default is no.
#whisper_deterministic_mode	= no

# Path to the python interpreter.
# Default is 'python3'.
#whisper_python	= /usr/bin/python3

# Number of threads for whisper processing.
# Default is 0 (auto).
#whisper_threads	= 4

# Path to the native whisper library (libwhisper.so).
# If not set, the sniffer will try to load it from standard library paths.
#whisper_native_lib	= /usr/local/lib/libwhisper.so

# Number of threads for audio transcription processing.
# Default is 2.
#audio_transcribe_threads	= 2

# Maximum length of the audio transcription queue.
# Default is 1000.
#audio_transcribe_queue_length_max	= 1000

# Enable parallel processing of audio channels.
# Default is yes.
#audio_transcribe_parallel_channel_processing	= yes

# File to log transcription progress.
# Default is empty.
#audio_transcribe_progress_file	= /tmp/transcribe_progress.log

# File to control the transcription process.
# Default is empty.
#audio_transcribe_control_file	= /tmp/transcribe_control

# This configuration will send SIP packets augmented with additional headers like X-Siptrace-Fromip, X-Siptrace-Toip, X-Siptrace-Time, X-Siptrace-Method, and X-Siptrace-Dir to the specified IP and port.
# Voipmonitor will remove these extra headers and use the information to construct a virtual UDP packet containing the SIP data.
# This allows you to send encrypted SIP packets within Kamailio.

# To enable the reception of packets from the Kamailio siptrace module, use the following settings:
# 'kamailio_dstip' should be the IP address of the Voipmonitor host, while 'kamailio_srcip' is the IP address of the Kamailio server (optional but useful).
# kamailio_port = 5888
# kamailio_dstip = 10.0.0.1
# kamailio_srcip = 10.0.0.2

#####################################
# Ribbon SBC Mirroring profiles     #
#####################################
# for the setting see https://www.voipmonitor.org/doc/Ribbon7k_monitoring_profiles
# it's similar to 'Kamailio Mirroring Using siptrace' but less headers are used. Only srcIP, dstIP headers are used.

# To enable the reception of packets from the Ribbon SBC monitoring profile, use the following settings:
# 'ribbonsbc_dstip' should be the IP address of the Voipmonitor host, while 'ribbonsbc_srcip' is the IP address of the Ribbon SBC server (optional but useful).
# ribbonsbc_port = 9514
# ribbonsbc_dstip = 10.0.0.1
# ribbonsbc_srcip = 10.0.0.2

###########################################
# SS7 

#ss7 = yes
#ss7_rudp_port = 7000
#ss7_use_sam_subsequent_number = yes

#####################################
# diameter protocol

#diameter = no
#diameter_tcp_ports = 3868
#diameter_udp_ports = 3868


# by default, Diameter packets are allowed to arrive up to 10 seconds before the SIP sessions.
#diameter_time_overlap = 10

# if the domain in SIP does not match the domain in Diameter, for example, if SIP contains an IP address
# but Diameter contains an FQDN, you can skip the domain match by enabling the following option (default NO)
#diameter_ignore_domain = yes

# enable the following option to allow matching if the SIP URI contains ‘sip:+123456789’
# but the Diameter’s public identity contains ‘tel:+123456789’ (default NO)
#diameter_ignore_prefix = yes

###########################################
# database backup special mode

#database_backup_from_date = 2013-09-10
# if database_backup_to_date is not set then max id is taken
#database_backup_to_date = 2013-09-20
#database_backup_from_mysqlhost = 127.0.0.1
#database_backup_from_mysqldb = voipmonitor
#database_backup_from_mysqlusername = root
#database_backup_from_mysqlpassword = rootpwd
#database_backup_pause = 3
#database_backup_insert_threads = 3

#ability to join reference crd tables when backing up (or migrating) the database
#database_backup_merge_reference_tables = yes/NO

# SSL/TLS settings
#database_backup_from_mysqlsslkey =
#database_backup_from_mysqlsslcert =
#database_backup_from_mysqlsslcacert =
#database_backup_from_mysqlsslcapath =
#database_backup_from_mysqlsslciphers =

#set maximum rows per backup cycle - default 10000
#database_backup_pass_rows = 10000

#sync cdr from the newest CDR id to the lowest. Default no (default is from the oldest)
#database_backup_desc_dir = no

#enable / disable register* tables backup - default no
#database_backup_skip_register = no

#option database_backup_check_src_tables = no


###########################################
# coredump / debugs
# default is 0x7F
#coredump_filter = 0x7F

#abort_if_heap_full (yes/NO)
#exit_if_heap_full (yes/NO)
#abort_if_heap_full_and_t2cpu_is_low (YES/no)
#exit_if_heap_full_and_t2cpu_is_low (yes/NO)


# DPDK - https://www.voipmonitor.org/doc/DPDK
#default reset time interval in seconds
#dpdk_timer_reset_interval = 60

# number of rx queues 
# default 2
# for higher traffic increase it accordingly
#dpdk_nb_rxq = 2

# Enable/disable interrupts stats, default yes
# On virtuozzo containers is not possible and should be disabled - set to no
#interrupts_counters = yes

#-rpbsN:{file} for read packet in real speed (Read via Packet Buffer with speed N; N >= 1; 1 for real speed, 2 for speed x2 ...)
